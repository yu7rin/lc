{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * public class ListNode \{\
 *     int val;\
 *     ListNode next;\
 *     ListNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public boolean isPalindrome(ListNode head) \{\
        ListNode prev = null;\
        ListNode mid = null;\
        ListNode post = null;\
        int i=0;\
        if(head == null || head.next == null)\{\
            return true;\
        \}\
        while(head.next != null)\{\
            post = head.next;\
            head.next = prev;\
            if(post.val == head.val)\{\
                return isSame(head,post);\
                \
            \}\
            \
            i++;\
            System.out.println(i);\
            prev = head;\
            head = post;\
        \}\
        return false;\
    \}\
     public boolean findMid(ListNode mid)\{\
         ListNode slow = head;\
         ListNode fast = head;\
     \}\
     public boolean isSame(ListNode left,ListNode right)\{\
         if(left == null && right == null)\{\
             System.out.println(2);\
             return true;\
         \}\
         if(left == null || right == null)\{  \
             return false;\
         \}\
         if(left.val == right.val)\{\
              System.out.println(1);\
             left = left.next;\
             right = right.next;\
             return isSame(left,right);\
         \}\
         System.out.println(4);\
         return false;\
          \}\
     \
\}}