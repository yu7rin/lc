{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * public class ListNode \{\
 *     int val;\
 *     ListNode next;\
 *     ListNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public void reorderList(ListNode head) \{\
        if(head == null || head.next == null || head.next.next == null)\{\
            return ;\
        \}\
        ListNode mid = findMid(head);\
        ListNode mid2 = mid.next;\
        mid.next = null;\
        ListNode dummy = new ListNode(0);\
        \
        mid2 = reverse(mid2);\
        while(mid2 != null && head != null)\{\
            dummy.next = head;\
            head = head.next;\
            dummy.next.next = mid2;\
            dummy = mid2;\
            mid2 = mid2.next;\
            \
        \}\
        if(mid2 == null && head != null)\{\
            dummy.next = head;\
            dummy=dummy.next;\
        \}\
        if(mid2 != null && head == null)\{\
            dummy.next = mid2;\
            dummy=dummy.next;\
            \
        \}\
         \
        return;\
    \}\
    public ListNode findMid(ListNode head)\{\
        ListNode fast = head.next;\
        ListNode slow = head;\
        \
        while(fast != null && fast.next != null)\{\
            fast = fast.next.next;\
            slow = slow.next;\
        \}\
        \
        return slow;\
        \
    \}\
    public ListNode reverse(ListNode head)\{\
        ListNode prev = null;\
        ListNode post = null;\
    \
        while(head != null)\{\
            post = head.next;\
            head.next = prev;\
            prev = head;\
            head = post;\
        \}\
        return prev;\
    \}\
\}}