{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red52\green52\blue52;\red236\green236\blue236;\red45\green98\blue1;
\red102\green155\blue78;\red115\green0\blue2;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
public
\f1\b0 \expnd0\expndtw0\kerning0
 class Solution \{\
        
\f0\b \expnd0\expndtw0\kerning0
public
\f1\b0 \expnd0\expndtw0\kerning0
 \cf4 \expnd0\expndtw0\kerning0
List\cf2 \expnd0\expndtw0\kerning0
<\cf4 \expnd0\expndtw0\kerning0
List\cf2 \expnd0\expndtw0\kerning0
<\cf4 \expnd0\expndtw0\kerning0
Integer\cf2 \expnd0\expndtw0\kerning0
>> levelOrderBottom(TreeNode root) \{\
            \cf4 \expnd0\expndtw0\kerning0
List\cf2 \expnd0\expndtw0\kerning0
<\cf4 \expnd0\expndtw0\kerning0
List\cf2 \expnd0\expndtw0\kerning0
<\cf4 \expnd0\expndtw0\kerning0
Integer\cf2 \expnd0\expndtw0\kerning0
>> wrapList = \cf5 \expnd0\expndtw0\kerning0
new\cf2 \expnd0\expndtw0\kerning0
 LinkedList<\cf4 \expnd0\expndtw0\kerning0
List\cf2 \expnd0\expndtw0\kerning0
<\cf4 \expnd0\expndtw0\kerning0
Integer\cf2 \expnd0\expndtw0\kerning0
>>();\
            levelMaker(wrapList, root, \cf6 \expnd0\expndtw0\kerning0
0\cf2 \expnd0\expndtw0\kerning0
);\
            
\f0\b \expnd0\expndtw0\kerning0
return
\f1\b0 \expnd0\expndtw0\kerning0
 wrapList;\
        \}\
        \
        
\f0\b \expnd0\expndtw0\kerning0
public
\f1\b0 \expnd0\expndtw0\kerning0
 \cf5 \expnd0\expndtw0\kerning0
void\cf2 \expnd0\expndtw0\kerning0
 levelMaker(\cf4 \expnd0\expndtw0\kerning0
List\cf2 \expnd0\expndtw0\kerning0
<\cf4 \expnd0\expndtw0\kerning0
List\cf2 \expnd0\expndtw0\kerning0
<\cf4 \expnd0\expndtw0\kerning0
Integer\cf2 \expnd0\expndtw0\kerning0
>> \cf4 \expnd0\expndtw0\kerning0
list\cf2 \expnd0\expndtw0\kerning0
, TreeNode root, int level) \{\
            
\f0\b \expnd0\expndtw0\kerning0
if
\f1\b0 \expnd0\expndtw0\kerning0
(root == \cf4 \expnd0\expndtw0\kerning0
null\cf2 \expnd0\expndtw0\kerning0
) 
\f0\b \expnd0\expndtw0\kerning0
return
\f1\b0 \expnd0\expndtw0\kerning0
;\
            
\f0\b \expnd0\expndtw0\kerning0
if
\f1\b0 \expnd0\expndtw0\kerning0
(level >= \cf4 \expnd0\expndtw0\kerning0
list\cf2 \expnd0\expndtw0\kerning0
.size()) \{\
                \cf4 \expnd0\expndtw0\kerning0
list\cf2 \expnd0\expndtw0\kerning0
.add(\cf6 \expnd0\expndtw0\kerning0
0\cf2 \expnd0\expndtw0\kerning0
, \cf5 \expnd0\expndtw0\kerning0
new\cf2 \expnd0\expndtw0\kerning0
 LinkedList<\cf4 \expnd0\expndtw0\kerning0
Integer\cf2 \expnd0\expndtw0\kerning0
>());\
            \}\
            levelMaker(\cf4 \expnd0\expndtw0\kerning0
list\cf2 \expnd0\expndtw0\kerning0
, root.left, level+\cf6 \expnd0\expndtw0\kerning0
1\cf2 \expnd0\expndtw0\kerning0
);\
            levelMaker(\cf4 \expnd0\expndtw0\kerning0
list\cf2 \expnd0\expndtw0\kerning0
, root.right, level+\cf6 \expnd0\expndtw0\kerning0
1\cf2 \expnd0\expndtw0\kerning0
);\
            \cf4 \expnd0\expndtw0\kerning0
list\cf2 \expnd0\expndtw0\kerning0
.get(\cf4 \expnd0\expndtw0\kerning0
list\cf2 \expnd0\expndtw0\kerning0
.size()-level\cf6 \expnd0\expndtw0\kerning0
-1\cf2 \expnd0\expndtw0\kerning0
).add(root.val);\
        \}\
    \}}