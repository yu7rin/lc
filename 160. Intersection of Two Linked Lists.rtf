{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * public class ListNode \{\
 *     int val;\
 *     ListNode next;\
 *     ListNode(int x) \{\
 *         val = x;\
 *         next = null;\
 *     \}\
 * \}\
 */\
public class Solution \{\
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) \{\
        if(headA == null || headB == null)\{\
            return null;\
        \}\
        int aLong = 0;\
        int bLong = 0;\
        ListNode countA = headA;\
        ListNode countB = headB;\
        while(countA.next != null)\{\
            countA = countA.next;\
            aLong++;\
            \
        \}\
        while(countB.next != null)\{\
            countB = countB.next;\
            bLong++;\
        \}\
        if(countA != countB)\{\
            return null;\
        \}else\{\
           int diff = aLong-bLong;\
           if(diff < 0)\{\
                for(int i=0;i < -diff;i++)\{\
                    headB = headB.next;\
               \}\
           \}\
           if(diff > 0)\{\
                for(int i=0;i < diff;i++ )\{\
                    headA = headA.next;\
               \}\
           \}\
           while(headA != headB)\{\
               headA = headA.next;\
               headB = headB.next;\
           \}\
           return headA;\
        \}\
    \}\
\}}