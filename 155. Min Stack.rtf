{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 public class MinStack \{\
    \
    \
    Stack<Integer> st = new Stack<Integer>();\
        Stack<Integer> minSt = new Stack<Integer>();\
        int min = Integer.MAX_VALUE;\
     \
    /** initialize your data structure here. */\
    public MinStack() \{\
        \
    \}\
    \
    public void push(int x) \{\
        st.push(x);\
        if(x < min)\{\
            min = x;\
        \}\
        minSt.push(min);\
    \}\
    \
    public void pop() \{\
        st.pop();\
        minSt.pop();\
        if(minSt.empty()) min = Integer.MAX_VALUE;\
        else min = minSt.peek();\
        \
       \
    \}\
    \
    public int top() \{\
        return st.peek();\
    \}\
    \
    public int getMin() \{\
        return minSt.peek();\
    \}\
\}}